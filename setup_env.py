#!/usr/bin/env python3
"""
Environment Setup Helper for Server Monitor
This script helps users configure SMTP settings for email notifications.
"""

import os
import getpass

def create_env_file():
    """Interactive setup of environment variables."""
    print("üîß Server Monitor SMTP Configuration Setup")
    print("=" * 50)
    print("This script will help you configure email notifications.")
    print("Press Enter to use default values shown in [brackets].\n")
    
    # SMTP Server Configuration
    print("üìß Email Provider Configuration:")
    print("1. Gmail (smtp.gmail.com)")
    print("2. Outlook/Hotmail (smtp.live.com)")
    print("3. Yahoo (smtp.mail.yahoo.com)")
    print("4. Custom SMTP server")
    
    choice = input("\nSelect your email provider (1-4) [1]: ").strip() or "1"
    
    if choice == "1":
        smtp_server = "smtp.gmail.com"
        smtp_port = "587"
        print("\n‚úÖ Using Gmail SMTP settings")
        print("üìã Gmail Setup Instructions:")
        print("   1. Enable 2-factor authentication on your Google account")
        print("   2. Go to Google Account settings > Security > App passwords")
        print("   3. Generate an app password for 'Mail'")
        print("   4. Use the generated password below (not your regular password)")
    elif choice == "2":
        smtp_server = "smtp.live.com"
        smtp_port = "587"
        print("\n‚úÖ Using Outlook/Hotmail SMTP settings")
    elif choice == "3":
        smtp_server = "smtp.mail.yahoo.com"
        smtp_port = "587"
        print("\n‚úÖ Using Yahoo SMTP settings")
        print("üìã Yahoo Setup Instructions:")
        print("   1. Enable 2-factor authentication")
        print("   2. Generate an app password for email")
    else:
        smtp_server = input("Enter SMTP server address: ").strip()
        smtp_port = input("Enter SMTP port [587]: ").strip() or "587"
    
    # SMTP Authentication
    print(f"\nüîê SMTP Authentication for {smtp_server}:")
    smtp_username = input("Email address (username): ").strip()
    smtp_password = getpass.getpass("Email password (hidden input): ").strip()
    
    # Email Addresses
    print("\nüì¨ Email Configuration:")
    smtp_from = input(f"From email address [{smtp_username}]: ").strip() or smtp_username
    smtp_to = input("Alert recipient email address: ").strip()
    
    # TLS Configuration
    smtp_use_tls = input("Use TLS encryption? (y/n) [y]: ").strip().lower()
    smtp_use_tls = "true" if smtp_use_tls != "n" else "false"
    
    # Create .env file content
    env_content = f"""# Server Monitor SMTP Configuration
# Generated by setup_env.py

# SMTP Server Settings
SMTP_SERVER={smtp_server}
SMTP_PORT={smtp_port}
SMTP_USE_TLS={smtp_use_tls}

# SMTP Authentication
SMTP_USERNAME={smtp_username}
SMTP_PASSWORD={smtp_password}

# Email Addresses
SMTP_FROM={smtp_from}
SMTP_TO={smtp_to}
"""
    
    # Write to .env file
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        print("\n‚úÖ Configuration saved to .env file")
        print("üîí Keep this file secure and don't share it publicly!")
        
        # Test configuration option
        test = input("\nWould you like to test the email configuration? (y/n) [y]: ").strip().lower()
        if test != "n":
            test_email_config(smtp_server, smtp_port, smtp_username, smtp_password, 
                            smtp_from, smtp_to, smtp_use_tls == "true")
    
    except Exception as e:
        print(f"\n‚ùå Error saving configuration: {e}")
        return False
    
    return True

def test_email_config(server, port, username, password, from_email, to_email, use_tls):
    """Test email configuration by sending a test message."""
    try:
        import smtplib
        from email.mime.text import MIMEText
        from email.mime.multipart import MIMEMultipart
        from datetime import datetime
        
        print("\nüß™ Testing email configuration...")
        
        # Create test message
        msg = MimeMultipart()
        msg['From'] = from_email
        msg['To'] = to_email
        msg['Subject'] = "Server Monitor - Configuration Test"
        
        body = f"""
This is a test email from Server Monitor configuration setup.

Configuration Details:
- SMTP Server: {server}:{port}
- From: {from_email}
- To: {to_email}
- TLS: {use_tls}
- Test Time: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

If you received this email, your SMTP configuration is working correctly!
You can now use the Server Monitor application with email notifications.
        """.strip()
        
        msg.attach(MIMEText(body, 'plain'))
        
        # Send test email
        smtp_server = smtplib.SMTP(server, int(port))
        
        if use_tls:
            smtp_server.starttls()
        
        smtp_server.login(username, password)
        smtp_server.send_message(msg)
        smtp_server.quit()
        
        print("‚úÖ Test email sent successfully!")
        print(f"üìß Check {to_email} for the test message.")
        
    except Exception as e:
        print(f"‚ùå Email test failed: {e}")
        print("üí° Common issues:")
        print("   - Check username/password")
        print("   - Verify app password for Gmail/Yahoo")
        print("   - Check firewall/network connectivity")
        print("   - Confirm SMTP server settings")

def show_current_config():
    """Display current environment configuration."""
    print("üìã Current SMTP Configuration:")
    print("=" * 40)
    
    env_vars = [
        'SMTP_SERVER', 'SMTP_PORT', 'SMTP_USE_TLS',
        'SMTP_USERNAME', 'SMTP_FROM', 'SMTP_TO'
    ]
    
    for var in env_vars:
        value = os.getenv(var, 'Not set')
        if var == 'SMTP_PASSWORD':
            continue  # Skip password for security
        print(f"{var}: {value}")
    
    password_set = bool(os.getenv('SMTP_PASSWORD'))
    print(f"SMTP_PASSWORD: {'Set' if password_set else 'Not set'}")

def load_env_file():
    """Load environment variables from .env file."""
    if os.path.exists('.env'):
        with open('.env', 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()
        return True
    return False

def main():
    """Main setup function."""
    print("üñ•Ô∏è  Server Availability Monitor - Setup")
    print("=" * 50)
    
    # Load existing configuration
    env_loaded = load_env_file()
    if env_loaded:
        print("üìÅ Found existing .env configuration file\n")
        show_current_config()
        print()
        
        choice = input("Would you like to:\n1. Keep current configuration\n2. Reconfigure SMTP settings\n3. Test current configuration\n\nSelect option (1-3) [1]: ").strip() or "1"
        
        if choice == "1":
            print("‚úÖ Using existing configuration")
            return
        elif choice == "3":
            config = {
                'server': os.getenv('SMTP_SERVER'),
                'port': os.getenv('SMTP_PORT'),
                'username': os.getenv('SMTP_USERNAME'),
                'password': os.getenv('SMTP_PASSWORD'),
                'from_email': os.getenv('SMTP_FROM'),
                'to_email': os.getenv('SMTP_TO'),
                'use_tls': os.getenv('SMTP_USE_TLS', 'true').lower() == 'true'
            }
            
            if all(config.values()):
                test_email_config(**config)
            else:
                print("‚ùå Incomplete configuration found. Please reconfigure.")
                create_env_file()
            return
    
    # Create new configuration
    success = create_env_file()
    
    if success:
        print("\nüéâ Setup completed successfully!")
        print("üìÑ You can now run the server monitor:")
        print("   python server_monitor.py")
        print("\nüí° Tips:")
        print("   - Keep the .env file secure and private")
        print("   - Add .env to your .gitignore file")
        print("   - Test email notifications before monitoring critical servers")
    else:
        print("\n‚ùå Setup failed. Please try again or configure manually.")

if __name__ == "__main__":
    main() 